import { loadFixture } from "@nomicfoundation/hardhat-network-helpers";
import { expect } from "chai";
import { ethers } from "hardhat";

import fs from "fs";

import { Chess } from "chess.js";
import { splitSignature } from "ethers/lib/utils";

import { coordinates_array, bitCoordinates_array } from '../scripts/constants';


describe("ChessFish Intensive MoveVerification Unit Tests", function () {
    async function deploy() {
        const [deployer, otherAccount] = await ethers.getSigners();

        const ERC20_token = await ethers.getContractFactory("Token");
        const token = await ERC20_token.deploy();

        const ChessFishToken = await ethers.getContractFactory("ChessFish");
        const chessFishToken = await ChessFishToken.deploy(deployer.address);
        await chessFishToken.deployed();

        const PaymentSplitter = await ethers.getContractFactory("PaymentSplitter");
        const paymentSplitter = await PaymentSplitter.deploy(chessFishToken.address);
        await paymentSplitter.deployed();

        const ChessNFT = await ethers.getContractFactory("ChessFishNFT");
        const chessNFT = await ChessNFT.deploy();

        const MoveVerification = await ethers.getContractFactory("MoveVerification");
        const moveVerification = await MoveVerification.deploy();

        const GaslessGame = await ethers.getContractFactory("GaslessGame");
        const gaslessGame = await GaslessGame.deploy(moveVerification.address);

        const ChessWager = await ethers.getContractFactory("ChessWager");
        const chess = await ChessWager.deploy(
            moveVerification.address,
            gaslessGame.address,
            paymentSplitter.address,
            chessNFT.address
        );

        await gaslessGame.setChessWager(chess.address);

        const amount = ethers.utils.parseEther("100");
        await token.transfer(otherAccount.address, amount);

        await chess.initCoordinates(coordinates_array, bitCoordinates_array);
        await chessNFT.setChessFishAddress(chess.address);

        const initalState = "0xcbaedabc99999999000000000000000000000000000000001111111143265234";
        const initialWhite = "0x000704ff";
        const initialBlack = "0x383f3cff";

        return {
            chess,
            gaslessGame,
            chessFishToken,
            paymentSplitter,
            chessNFT,
            deployer,
            otherAccount,
            initalState,
            initialWhite,
            initialBlack,
            token,
        };
    }

    describe("Functionality Tests", function () {
        let games;
        try {
            const data = fs.readFileSync("test/test_data/output_moves.json", "utf8");
            games = JSON.parse(data);
        } catch (err) {
            console.error("Error reading file:", err);
            return;
        }

        games.forEach((game, index) => {
            it(`Should get outcome from checkEndgame using algebraic chess notation for game ${
                index + 1
            }`, async function () {
                const { chess, moveVerification } = await loadFixture(deploy);

                const chessInstance = new Chess();

                const moves = game.moves;

                let hex_moves = [];

                for (let i = 0; i < moves.length; i++) {
                    let fromSquare = moves[i].substring(0, 2);
                    let toSquare = moves[i].substring(2);

                    try {
                        chessInstance.move({
                            from: fromSquare,
                            to: toSquare,
                            promotion: "q",
                        });
                    } catch (error) {
                        console.log(fromSquare + toSquare);
                        console.log(error);
                        break;
                    }

                    let hex_move = await chess.moveToHex(moves[i]);
                    hex_moves.push(hex_move);
                }

                let outcome = await moveVerification.checkGameFromStart(hex_moves);

                // 0 = inconclusive
                // 1 = draw
                // 2 = white win
                // 3 = black win

                // not checking for draws only stalemates
                let winner;
                if (chessInstance.isCheckmate()) {
                    winner = chessInstance.turn() === "w" ? 3 : 2;

                    let winnerColor = chessInstance.turn() === "w" ? "Black" : "White";
                    console.log(`CHECKMATE ${winnerColor} won the game`);
                } else if (chessInstance.isStalemate()) {
                    console.log("DRAW");
                    winner = 1;
                } else {
                    winner = 0;
                }

                // if this fails it means that there was a draw
                expect(outcome[0]).to.equal(winner);

                chessInstance.reset();
            });
        });
    });
});
